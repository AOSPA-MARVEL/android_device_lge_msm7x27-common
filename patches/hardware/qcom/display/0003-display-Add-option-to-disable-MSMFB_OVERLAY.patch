From f2447ba8543c3db67722de89d04b8d8b208f4dd0 Mon Sep 17 00:00:00 2001
From: Pavel Kirpichyov <pavel.kirpichyov@gmail.com>
Date: Sat, 1 Dec 2012 15:34:46 -0700
Subject: [PATCH] display: Add option to disable MSMFB_OVERLAY

* Set TARGET_NO_HW_OVERLAY to disable use of MSMFB_OVERLAY

Change-Id: I99c7647bfaf95e6078d261bfdca96c72e7b06779
---
 common.mk                   |    4 ++++
 libhwcomposer/hwc_utils.cpp |    2 ++
 liboverlay/overlay.cpp      |    3 ++-
 liboverlay/overlay.h        |    2 ++
 liboverlay/overlayUtils.cpp |    3 ++-
 liboverlay/overlayUtils.h   |    2 ++
 6 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/common.mk b/common.mk
index 66f9a60..e17b029 100644
--- a/common.mk
+++ b/common.mk
@@ -38,6 +38,10 @@ ifeq ($(BOARD_HAS_NO_HDMI),true)
     common_flags += -DNO_HDMI
 endif
 
+ifeq ($(TARGET_NO_HW_OVERLAY),true)
+    common_flags += -DNO_HW_OVERLAY
+endif
+
 common_deps  :=
 kernel_includes :=
 
diff --git a/libhwcomposer/hwc_utils.cpp b/libhwcomposer/hwc_utils.cpp
index c9be2b8..49cf6be 100644
--- a/libhwcomposer/hwc_utils.cpp
+++ b/libhwcomposer/hwc_utils.cpp
@@ -51,7 +51,9 @@ static void openFramebufferDevice(hwc_context_t *ctx)
 void initContext(hwc_context_t *ctx)
 {
     openFramebufferDevice(ctx);
+#ifndef NO_HW_OVERLAY
     overlay::Overlay::initOverlay();
+#endif
     for(uint32_t i = 0; i < HWC_NUM_DISPLAY_TYPES; i++) {
         ctx->mOverlay[i] = overlay::Overlay::getInstance(i);
     }
diff --git a/liboverlay/overlay.cpp b/liboverlay/overlay.cpp
index 170b8a9..59c499b 100644
--- a/liboverlay/overlay.cpp
+++ b/liboverlay/overlay.cpp
@@ -197,10 +197,11 @@ Overlay* Overlay::getInstance(int disp) {
     return sInstance[disp];
 }
 
+#ifndef NO_HW_OVERLAY
 void Overlay::initOverlay() {
     if(utils::initOverlay() == -1) {
         ALOGE("utils::initOverlay() ERROR!!");
     }
 }
-
+#endif
 } // overlay
diff --git a/liboverlay/overlay.h b/liboverlay/overlay.h
index f8f9c34..793cdce 100644
--- a/liboverlay/overlay.h
+++ b/liboverlay/overlay.h
@@ -66,8 +66,10 @@ public:
     /* expose state */
     utils::eOverlayState getState() const;
 
+#ifndef NO_HW_OVERLAY
     /* Closes open pipes */
     static void initOverlay();
+#endif
 
     /* Returns the per-display singleton instance of overlay */
     static Overlay* getInstance(int disp);
diff --git a/liboverlay/overlayUtils.cpp b/liboverlay/overlayUtils.cpp
index 1c9c72b..eec92db 100644
--- a/liboverlay/overlayUtils.cpp
+++ b/liboverlay/overlayUtils.cpp
@@ -158,6 +158,7 @@ bool FrameBufferInfo::supportTrueMirroring() const {
     return (trueMirroringSupported && mBorderFillSupported);
 }
 
+#ifndef NO_HW_OVERLAY
 /* clears any VG pipes allocated to the fb devices */
 int initOverlay() {
     msmfb_mixer_info_req  req;
@@ -201,7 +202,7 @@ int initOverlay() {
     }
     return 0;
 }
-
+#endif
 //--------------------------------------------------------
 //Refer to graphics.h, gralloc_priv.h, msm_mdp.h
 int getMdpFormat(int format) {
diff --git a/liboverlay/overlayUtils.h b/liboverlay/overlayUtils.h
index 7432ff8..2e4b38f 100644
--- a/liboverlay/overlayUtils.h
+++ b/liboverlay/overlayUtils.h
@@ -145,10 +145,12 @@ enum { INPUT_3D_MASK = 0xFFFF0000,
 enum { BARRIER_LAND = 1,
     BARRIER_PORT = 2 };
 
+#ifndef NO_HW_OVERLAY
 /* if SurfaceFlinger process gets killed in bypass mode, In initOverlay()
  * close all the pipes if it is opened after reboot.
  */
 int initOverlay(void);
+#endif
 
 inline uint32_t format3D(uint32_t x) { return x & 0xFF000; }
 inline uint32_t colorFormat(uint32_t fmt) {
-- 
1.7.10.4

